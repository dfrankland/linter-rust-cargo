{"version":3,"file":"index.js","sources":["../src/config.js","../src/linter/spawnCargoCommands.js","../src/linter/messageConverter.js","../src/linter/index.js","../src/index.js"],"sourcesContent":["export default {\n  cargoCommandPath: {\n    title: 'Cargo Command Path',\n    description: 'Path to Rust\\'s package manager `cargo`.',\n    type: 'string',\n    default: 'cargo',\n  },\n  cargoCommandArguments: {\n    title: 'Cargo Command Arguments',\n    description: `\nUse \\`cargo --help\\` to see all available commands and options; separated by commas (\\`,\\`)\n.\n\n**Must use \\`--message-format, JSON\\` somewhere, otherwise this will break\n.**\n\nExample of \\`clippy\\` command arguments: \\`clippy, --all, --jobs, 2, --message-format, JSON, --, -D, clippy\\`\n`,\n    type: 'array',\n    items: {\n      type: 'string',\n    },\n    default: ['check', '--all', '--jobs', '2', '--message-format', 'JSON'],\n  },\n  cargoManifestGlob: {\n    title: 'Cargo Manifest Filename Glob',\n    description: 'Used to find and run Cargo on all crates in a project.',\n    type: 'string',\n    default: '**/Cargo.toml',\n  },\n  disabledLints: {\n    title: 'Disabled Lints',\n    description: `\\\nLint codes to be ignored; separated by commas (\\`,\\`)\n.\n\nExample of ignoring compiler lints, clippy lints, and compiler errors: \\`unused_imports, match_ref_pats, E0463\\`\n`,\n    type: 'array',\n    items: {\n      type: 'string',\n    },\n    default: [],\n  },\n  execTimeout: {\n    title: 'Execution Timeout (milliseconds)',\n    description: 'Processes running longer than the timeout will be automatically terminated.',\n    type: 'integer',\n    default: 60000,\n  },\n};\n","import { dirname } from 'path';\nimport execa from 'execa';\nimport uuidv4 from 'uuid/v4';\n\n// Takes an array of paths to `Cargo.toml` manifests, and returns an array of\n// promises that resolve to an array of JSON objects returned by each `cargo`\n// command run for each `Cargo.toml` manifest.\nexport default ({\n  cargoManifests = [],\n  runningProcesses = new Map(),\n  config: {\n    cargoCommandPath = '',\n    cargoCommandArguments = [],\n    execTimeout = 0,\n  } = {},\n}) => (\n  cargoManifests.map((\n    async (manifestPath) => {\n      // Get directory of `Cargo.toml` manifest file. This directory is where\n      // the `cargo` command child process will be run from.\n      const cwd = dirname(manifestPath);\n\n      // Create new `cargo` command child process.\n      const spawn = execa.stdout(\n        cargoCommandPath,\n        cargoCommandArguments,\n        { timeout: execTimeout, cwd },\n      );\n\n      // Add new child process to `runningProcesses`.\n      const id = uuidv4();\n      runningProcesses.set(id, spawn);\n\n      // Await for the result of the newly spawned child process.\n      const result = await (async () => {\n        try {\n          // No errors! Files passed all lints and compiled properly.\n          return await spawn;\n        } catch (err) {\n          // Some errors, either lints or compilation problems.\n          if (err.code === 101) return err;\n\n          // Linting took too long and the process was killed.\n          if (err.timedOut) console.warn('Linting timedout.'); // eslint-disable-line no-console\n\n          // The process was not killed intentionally and another, unknown,\n          // error occured.\n          if (!err.killed) console.error(err); // eslint-disable-line no-console\n        }\n\n        return { stdout: '' };\n      })();\n\n      // Job completed remove it from the the `runningProcesses`.\n      if (runningProcesses.has(id)) runningProcesses.delete(id, spawn);\n\n      // The result of `cargo` commands will always be a large string with JSON\n      // objects seperated by newline characters.\n      return (result.stdout || '').split('\\n').reduce(\n        (allMessages, jsonString) => {\n          // Some commands, like `clippy`, give a line at the begging like\n          // \"lib: crate_name\" before printing the JSON. This causes the\n          // `JSON.parse` to throw. This way we safely filter those lines out.\n          try {\n            const json = JSON.parse(jsonString);\n            json.cwd = cwd;\n            return [...allMessages, json];\n          } catch (err) {\n            return allMessages;\n          }\n        },\n        [],\n      );\n    }\n  ))\n);\n","/* global atom:true */\n\nimport { resolve as resolvePath } from 'path';\n\nconst INCLUDED_REASONS = ['compiler-message'];\n\n// The `cargo` message JSON objects use `null` values which makes destructuring\n// difficult.\nconst cargoMessageToNormalizedObject = ({ cargoMessage = {}, cwd }) => {\n  const {\n    message,\n    level,\n    code: possiblyNullCode,\n    spans: [\n      {\n        line_start: rowStart,\n        column_start: columnStart,\n        line_end: rowEnd,\n        column_end: columnEnd,\n        file_name: fileName,\n        suggested_replacement: suggestedReplacement,\n      } = {},\n    ] = [],\n    children,\n  } = cargoMessage;\n\n  const { code, explanation } = possiblyNullCode || {};\n\n  return {\n    message: message || '',\n    level: level || 'error',\n    position: [\n      [(rowStart || 1) - 1, (columnStart || 1) - 1],\n      [(rowEnd || 1) - 1, (columnEnd || 1) - 1],\n    ],\n    file: cwd && fileName ? resolvePath(cwd, fileName) : '',\n    children: children || [],\n    code: code || '',\n    explanation: explanation || '',\n    suggestedReplacement,\n  };\n};\n\nconst getUrl = ({ code, children, cargoMessage }) => {\n  if (/^E\\d\\d\\d\\d$/.test(code)) {\n    return `https://doc.rust-lang.org/error-index.html#${code}`;\n  }\n\n  const [url] = children.reduce(\n    (allUrls, { message }) => {\n      if (!message) return allUrls;\n\n      const matches = message.match(/\\bhttps?:\\/\\/\\S+/);\n      if (!matches) return allUrls;\n\n      return [...allUrls, matches[0]];\n    },\n    [],\n  );\n\n  if (url) return url;\n\n  if (code) {\n    return `https://manishearth.github.io/rust-internals-docs/rustc/lint/builtin/static.${code.toUpperCase()}.html`;\n  }\n\n  if (atom.inDevMode()) {\n    console.log('`code` is not provided', cargoMessage); // eslint-disable-line no-console\n  }\n\n  return null;\n};\n\nconst getDescription = ({ children }) => (\n  children.reduce(\n    (\n      allDescriptions,\n      nextChild,\n    ) => {\n      const { level, message } = cargoMessageToNormalizedObject({ cargoMessage: nextChild });\n      if (level !== 'note') return allDescriptions;\n      return `${allDescriptions}\\n\\n**${level}:** ${message}`;\n    },\n    '',\n  )\n);\n\nconst getSolutions = ({ children }) => (\n  children.reduce(\n    (\n      allSolutions,\n      nextChild,\n    ) => {\n      const {\n        level,\n        message,\n        position,\n        suggestedReplacement,\n      } = cargoMessageToNormalizedObject({ cargoMessage: nextChild });\n\n      if (level !== 'help' || !suggestedReplacement) return allSolutions;\n\n      return [\n        ...allSolutions,\n        {\n          title: message,\n          position,\n          replaceWith: suggestedReplacement,\n        },\n      ];\n    },\n    [],\n  )\n);\n\nexport default ({\n  messages = [],\n  config: {\n    disabledLints = [],\n  } = {},\n}) => (\n  messages.reduce(\n    (allResults, nextMessage) => {\n      const {\n        reason,\n        cwd,\n        message: cargoMessage,\n      } = nextMessage;\n\n      const {\n        message,\n        code,\n        file,\n        level,\n        position,\n        children,\n      } = cargoMessageToNormalizedObject({ cargoMessage, cwd });\n\n      if (\n        INCLUDED_REASONS.indexOf(reason) === -1 ||\n        disabledLints.indexOf(code) > -1 ||\n        !file\n      ) {\n        return allResults;\n      }\n\n      return [\n        ...allResults,\n        {\n          excerpt: `${code ? `[${code}] ` : ''}${message}`,\n          description: getDescription({ children }),\n          url: getUrl({ code, children, cargoMessage: nextMessage }),\n          severity: level,\n          location: {\n            file,\n            position,\n          },\n          solutions: getSolutions({ children }),\n        },\n      ];\n    },\n    [],\n  )\n);\n","/* global atom:true */\n\nimport { resolve as resolvePath } from 'path';\nimport { CompositeDisposable } from 'atom'; // eslint-disable-line\nimport globby from 'globby';\nimport { name } from '../../package.json';\nimport config from '../config';\nimport spawnCargoCommands from './spawnCargoCommands';\nimport messageConverter from './messageConverter';\n\nexport default class {\n  constructor() {\n    // Subscribe to Atom to receive user configured config.\n    this.config = {};\n    this.subscriptions = new CompositeDisposable();\n    Object.keys(config).forEach((\n      (key) => {\n        this.subscriptions.add((\n          atom.config.observe(\n            `${name}.${key}`,\n            (value) => {\n              this.config[key] = value;\n            },\n          )\n        ));\n      }\n    ));\n  }\n\n  // Stop subscribing to Atom for config when Linter object is destroyed.\n  destroy = () => this.subscriptions.dispose();\n\n  // Map of `cargo` command child processes.\n  runningProcesses = new Map();\n\n  lint = async () => {\n    // Kill any running `cargo` command child processes, before re-running.\n    this.runningProcesses.forEach((id, runningProcess, runningProcesses) => {\n      if (runningProcess && runningProcess.kill) runningProcess.kill();\n      if (runningProcesses.has(id)) runningProcesses.delete(id);\n    });\n\n    // Get all `Cargo.toml` manifests in the project.\n    const cargoManifests = await globby((\n      atom.project.getDirectories().map((\n        ({ realPath = '' }) => resolvePath(\n          realPath,\n          this.config.cargoManifestGlob,\n        )\n      ))\n    ));\n\n    // Returns an array of arrays with JSON returned by `cargo` commands.\n    const messageGroups = await Promise.all((\n      spawnCargoCommands({ cargoManifests, config: this.config })\n    ));\n\n    // Flatten array of arrays of JSON objects to a single array of JSON\n    // objects.\n    const messages = messageGroups.reduce(\n      (allMessages, messageGroup) => [...allMessages, ...messageGroup],\n      [],\n    );\n\n    // Convert JSON objects returned by `cargo` commands into Atom `linter`\n    // message objects.\n    return messageConverter({ messages, config: this.config });\n  };\n}\n","/* global atom:true */\n\nimport Linter from './linter';\nimport config from './config';\n\nexport { config };\n\nlet activated = false;\n\nexport const activate = () => {\n  activated = true;\n};\n\nexport const deactivate = () => {\n  activated = false;\n};\n\nexport const provideLinter = () => {\n  const linter = new Linter(config);\n\n  return {\n    name: 'Rust Cargo',\n    scope: 'project',\n    lintsOnChange: false,\n    grammarScopes: ['source.rust'],\n    lint: () => {\n      if (!activated) return [];\n\n      if (atom.inDevMode()) console.time('lint-rust-cargo'); // eslint-disable-line no-console\n\n      const results = linter.lint();\n\n      if (atom.inDevMode()) console.timeEnd('lint-rust-cargo'); // eslint-disable-line no-console\n\n      return results;\n    },\n  };\n};\n"],"names":["Map","cargoManifests","map","manifestPath","cwd","dirname","spawn","execa","stdout","cargoCommandPath","cargoCommandArguments","execTimeout","id","uuidv4","set","result","err","code","timedOut","console","warn","killed","error","runningProcesses","has","delete","split","reduce","allMessages","jsonString","json","JSON","parse","INCLUDED_REASONS","cargoMessageToNormalizedObject","possiblyNullCode","rowStart","columnStart","rowEnd","columnEnd","fileName","suggestedReplacement","cargoMessage","message","level","resolvePath","children","explanation","getUrl","test","url","allUrls","matches","match","toUpperCase","atom","inDevMode","log","getDescription","allDescriptions","nextChild","getSolutions","allSolutions","messages","allResults","nextMessage","indexOf","reason","disabledLints","file","subscriptions","dispose","forEach","runningProcess","kill","globby","project","getDirectories","realPath","config","cargoManifestGlob","messageGroups","Promise","all","spawnCargoCommands","messageGroup","messageConverter","CompositeDisposable","keys","key","add","observe","name","value","activated","activate","deactivate","provideLinter","linter","Linter","time","results","lint","timeEnd"],"mappings":"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"}